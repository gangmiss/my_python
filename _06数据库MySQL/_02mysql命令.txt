
连接远程服务器：
mysql -hip地址 -uroot -p

创建数据库
create database 数据库名 charset=utf8

删除数据库
drop database 数据库名

切换数据库
use 数据库名

查看当前数据库
select databases;

查看当前数据库所有表
show tables

ENGINE=InnoDB DEFAULT CHARACTER SET=utf8 COLLATE=utf8_general_ci;

视图：为了更好的管理多表数据集，对一个查询语句的封装
create view 视图名 as 结果集（select ...）

事务：为保证业务逻辑的完整性，开启事务
     事务具有4个基本特征，分别是：
     原子性（Atomicity）：不可分开，要么全部执行成功，要么全部不执行成功
     一致性（Consistency）：几个并行的事务，不论执行顺序，结果都是一样的
     隔离性（Isolation）：事务的执行不受其他事务的干扰，并行处理
     持久性（Duration）：事务一旦提交，确保数据更改就会生成
     简称ACID，该表的类型必须是innodb或者bdb类型，才可以使用事务
     修改表类型：alter table engine=innodb

     如果没有事务会发生如下现象：
     脏读：是某一事务读取了另一个事务未提交的脏数据
     不可重复读：是某一事务读取了前一事务提交的数据。
     虚读(幻读)：两个数据库操作都对同一字段更改，结果看到的不是自己想要的


索引：通过某个字段更方便快速的查询
     创建索引：create index 索引名 on 表名(字段名(指定长度))
     删除索引：drop index 索引名 on 表名



数据备份:
sudo -s
进入mysql目录cd /var/lib/mysql
mysqldump -uroot -p 数据库 > ~/Desktop/备份文件.sql



数据恢复：
连接mysql，创建数据库
mysql -uroot -p 数据库 < ~/Desktop/备份文件.sql



外键约束：
1.建表时添加：foreign key(stuid) references room(id)
2.为保证数据的有效性，可以为一个表的某个字段添加外键
alert table student add constraint stu_room_id foreign key(roomid) references rooms(id)



查询：
1.distinct  每行不重复
2.%和_    模糊匹配全部，模糊匹配一个字符
3.in     在不连续的范围内中查询
3.between and   在一个连续的范围内查询
4.is null   is not null
5.优先级：
  括号 not 比较运算符 逻辑运算符
  and比or先
6.聚合函数：
count(字段)：统计该字段的个数
min(字段)：该字段的最小值
max(字段)：该字段的最大值
sum(字段)：该字段的求和
avg(字段)：该字段的平均值
7.分组：
set @@GLOBAL.sql_mode='';
set sql_mode ='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';

select 选取分组中的列+聚合函数 from 表名称 group by 分组的列
8.排序：
order by asc|desc
9.分页：
limit start,count   从索引start开始选取count个
10.自关联查询：物理上一张表，逻辑上当作两张表连接查询（内连，左连，右连），一般是两个表的数据结果大体相同或数据相近，那么就直接把这些数据存储到一张表中，就可以使用自关联查询
11.执行顺序：
select * 
from 表名
where ...
group by ... having ...
order by ...
limit start,count



window下的navicate连接Ubuntu数据库：

1.执行命令 netstat -an|grep 3306​查看是否监听数据库端口
2.vi /etc/mysql/mysql.conf.d/mysqld.cnf 注释bind address 127.0.0.1
3.重启Ubuntu
4.进入sql命令模式下
5.grant all on *.* to 'root'@'%' identified by 'gangmiss' with grant option  授权所有远程用户
6./etc/init.d/mysql restart 重启mysql



三种连接查询方式：
inner join:两个表都有的数据行才会出现在结果集中
left join：左边的所有行都会出现在结果集中，没有数据的会用Null填充
right join：右边的所有行都会出现在结果中，没有数据的会用Null填充


set profiling=1
select * from student
show profiles  查看查询耗时时间


select abs(-32) 求绝对值
select mod(10,3)同比select 10%3   求余
select floor(2.3) 向下舍入  2
select ceiling(2.3) 向上舍入 3
select floor(2.3,0) 向下舍入,小数点后是0位  2
select ceiling(2.3,0) 向上舍入,小数点后是0位 3
round(2.3,0) 四舍五入（第二个参数参数表示小数点后是0位）  2



1、说明：创建数据库
CREATE DATABASE database-name
2、说明：删除数据库
drop database dbname
3、说明：备份sql server
--- 创建 备份数据的 device
USE master
EXEC sp_addumpdevice 'disk', 'testBack', 'c:\mssql7backup\MyNwind_1.dat'
--- 开始 备份
BACKUP DATABASE pubs TO testBack
4、说明：创建新表
create table tabname(col1 type1 [not null] [primary key],col2 type2 [not null],..)
根据已有的表创建新表：
A：create table tab_new like tab_old (使用旧表创建新表)
B：create table tab_new as select col1,col2… from tab_old definition only
5、说明：删除新表
drop table tabname
6、说明：增加一个列
Alter table tabname add column col type
注：列增加后将不能删除。DB2中列加上后数据类型也不能改变，唯一能改变的是增加varchar类型的长度。
7、说明：添加主键： Alter table tabname add primary key(col)
说明：删除主键： Alter table tabname drop primary key(col)
8、说明：创建索引：create [unique] index idxname on tabname(col….)
删除索引：drop index idxname
注：索引是不可更改的，想更改必须删除重新建。
9、说明：创建视图：create view viewname as select statement
删除视图：drop view viewname
10、说明：几个简单的基本的sql语句
选择：select * from table1 where 范围
插入：insert into table1(field1,field2) values(value1,value2)
删除：delete from table1 where 范围
更新：update table1 set field1=value1 where 范围
查找：select * from table1 where field1 like ’%value1%’ ---like的语法很精妙，查资料!
排序：select * from table1 order by field1,field2 [desc]
总数：select count as totalcount from table1
求和：select sum(field1) as sumvalue from table1
平均：select avg(field1) as avgvalue from table1
最大：select max(field1) as maxvalue from table1
最小：select min(field1) as minvalue from table1

增加一个字段：
//增加一个字段，默认为空
alter table user add COLUMN new1 VARCHAR(20) DEFAULT NULL;
//增加一个字段，默认不能为空
alter table user add COLUMN new2 VARCHAR(20) NOT NULL;
批量增加字段：
bagin;                                           //事务开始
alter table em_day_data add f_day_house7 int(11);
alter table em_day_data add f_day_house8 int(11);
alter table em_day_data add f_day_house9 int(11);
alter table em_day_data add f_day_house10 int(11);
commit;

//批量为表增加多个字段：
alter table student add (name varchar(11),age varchar(11),addr varchar(11));

//删除一个字段
alter table user DROP COLUMN new2;

//修改一个字段的类型
alter table user MODIFY new1 VARCHAR(10);
//修改一个字段的名称，此时一定要重新指定该字段的类型
alter table user CHANGE new1 new4 int;
